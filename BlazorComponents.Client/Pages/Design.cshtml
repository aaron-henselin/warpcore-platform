
@using BlazorComponents.Shared
@using System.Linq.Expressions
@using System.Linq
@using System.Net
@using BlazorComponents.Client
@using BlazorComponents.Client.Shared
@using BlazorComponents.Client.Shared.PageDesigner
@using BlazorComponents.Shared
@page "/Pages/{pageId}/Design"
@inject HttpClient Http




<div class="row">
    <wc-design class="@(Chrome.SideBarMode != SideBarMode.Collapsed ? "col-md-9" : "col-md-12")">

        @if (Chrome.SideBarMode == SideBarMode.Collapsed || Chrome.SideBarMode == SideBarMode.Toolbox)
        {
            <wc-sidebar-handle>
                <a class="handle" onclick=@ToggleSideBar>
                    <span class="glyphicon glyphicon-wrench"></span>
                </a>
            </wc-sidebar-handle>
        }

        @if (CurrentPreview == null)
        {
            <p>
                <em>Loading design...</em>
            </p>
        }
        else
        {
            <PageDesignerWidget DesignNode=@CurrentPreview Dispatcher=@dispatcher />
        }
    </wc-design>
    <wc-sidebar class="@(Chrome.SideBarMode == SideBarMode.Configurator ? "col-md-3" : "collapse")">
        <PageDesignerConfigurator ref="ConfiguratorWidget" Dispatcher=@formEventDispatcher />
    </wc-sidebar>
    <wc-sidebar class="@(Chrome.SideBarMode == SideBarMode.Toolbox ? "col-md-3" : "collapse")">
        <PageDesignerToolBox ref="ToolBoxWidget" />
    </wc-sidebar>


  
</div>




@functions {
    [Parameter]
    string pageId{get;set;}

    PageDesignerToolBox ToolBoxWidget { get; set; }
    PageDesignerConfigurator ConfiguratorWidget { get; set; }

    PreviewNode CurrentPreview { get; set; }
    PageStructure CurrentStructure { get; set; }

    DesignerChrome Chrome { get; set; } = DesignerChrome.Default;

    PageDesignEventsDispatcher dispatcher  = new PageDesignEventsDispatcher();
    FormEventDispatcher formEventDispatcher = new FormEventDispatcher();

    protected override void OnInit()
    {
        dispatcher = new PageDesignEventsDispatcher
        {
            Edit = async(contentToEdit) => {
                var relatedPageContent = this.CurrentStructure.FindDescendentNode(contentToEdit);
                if (relatedPageContent == null)
                    throw new Exception("Node with id " + contentToEdit + " could not be found in the current page structure.");

                await BeginExpandSideBarAndStartEditing(relatedPageContent);
            },
            Delete = contentToDelete =>
            {
                CurrentPreview.RemoveDescendentNode(contentToDelete);
            }
        };
    }

    protected override async Task OnInitAsync()
    {
        formEventDispatcher.EditingCancelled += (sender, args) =>
        {
            Chrome.SideBarMode = SideBarMode.Collapsed;
        };

        await BeginRetrievingPagePreview(new Guid(pageId));
    }

    private async Task BeginRetrievingPagePreview(Guid previewPageId)
    {
        try
        {
            CurrentPreview = await Http.GetJsonAsync<PreviewNode>("api/design/page/" + previewPageId +"/preview");
            CurrentStructure = await Http.GetJsonAsync<PageStructure>("api/design/page/" + previewPageId +"/structure");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            var errorPage = new PreviewNode{
                Type = NodeType.Element,
                FriendlyName = "Error Message",
                IsFromLayout =true};
            errorPage.ChildNodes.Add(
                new PreviewNode{Type = NodeType.Html,
                    Html = "There was an error retrieving the page design."

                });

            CurrentPreview = errorPage;
        }
    }

    private async Task BeginExpandSideBarAndStartEditing(StructureNode relatedPageContent)
    {
        Console.WriteLine($"[Design Page] Expanding Configurator Sidebar");
        Chrome.SideBarMode = SideBarMode.Configurator;
        this.StateHasChanged();

        //(1) Set up form layout
        /////////////////////////////////
        Console.WriteLine($"[Design Page] Configurator Sidebar resetting.");
        ConfiguratorWidget.FormDescription = null;
        var formDescription = await RetrieveConfiguratorSidebarLayoutAsync(relatedPageContent.WidgetTypeCode);
        Console.WriteLine($"[Design Page] Applying new form layout.");
        ConfiguratorWidget.FormDescription = formDescription;
        this.StateHasChanged();

        //(2) set up new form session
        //////////////////////////////////
        var session = new FormSession
        {
            ContentId = relatedPageContent.Id,
            OriginalValues = relatedPageContent.Parameters
        };
        formEventDispatcher.StartNewSession(session);
    }

    private async Task<ConfiguratorFormDescription> RetrieveConfiguratorSidebarLayoutAsync(string widgetTypeCode)
    {
        Console.WriteLine($"[Design Page] Retrieving new form description");
        var formApiPath = "api/design/configurator-form/" + widgetTypeCode;
        var formDescription = await Http.GetJsonAsync<ConfiguratorFormDescription>(formApiPath);
        return formDescription;

    }

    void ToggleSideBar(UIMouseEventArgs toExpand)
    {
        Chrome.SideBarMode = Chrome.SideBarMode == SideBarMode.Collapsed ? SideBarMode.Toolbox : SideBarMode.Collapsed;
        this.StateHasChanged();
    }

 }


<style>
    wc-sidebar-handle {
        position: absolute;
        right: 0;
        background-color: #000000c9;
        padding: 5px;
        width: 40px;
        color: white;
        font-size: 20px;
    }
    wc-sidebar.col-md-3 {
        padding: 0;
    }
</style>