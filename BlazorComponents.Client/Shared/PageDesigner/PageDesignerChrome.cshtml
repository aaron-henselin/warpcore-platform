@using System.Net
@using BlazorComponents.Client
@using BlazorComponents.Client.Shared.PageDesigner
@using BlazorComponents.Client.Shared.PageDesigner.Preview
@using BlazorComponents.Shared
@inject HttpClient Http
@implements IHasBusyState
<wc-chrome class="row">


    <wc-design class="col">
        @if (SideBarMode == SideBarMode.Collapsed || SideBarMode == SideBarMode.Toolbox)
        {
            <wc-sidebar-handle>
                @if (IsBusy)
                {
                    <div class="loader-sm"></div>
                }
                else
                {
                    <a class="handle" onclick=@ToggleSideBar>
                        <span class="fas fa-tools"></span>
                    </a>
                }
            </wc-sidebar-handle>
        }
        <CascadingValue Value=@this>
            <PagePreview ref="Preview" />
        </CascadingValue>
    </wc-design>

    <wc-sidebar class="@(SideBarMode == SideBarMode.Configurator ? "col col-md-3" : "collapse")">
        <CascadingValue Value=@this>
            <PageDesignerConfigurator ref="ConfiguratorWidget" Dispatcher=@formEventDispatcher />
        </CascadingValue>
    </wc-sidebar>
    <wc-sidebar class="@(SideBarMode == SideBarMode.Toolbox ? "col col-md-3" : "collapse")">
        <CascadingValue Value=@this>
            <PageDesignerToolBox ref="ToolBoxWidget" />
        </CascadingValue>
    </wc-sidebar>

</wc-chrome>

@functions
{
    [Parameter]
    public Guid pageId { get; set; }

    private SideBarMode SideBarMode { get; set; }

    public PageStructure CurrentStructure { get; set; }

    PagePreview Preview { get; set; }
    PageDesignerToolBox ToolBoxWidget { get; set; }
    PageDesignerConfigurator ConfiguratorWidget { get; set; }

    FormEventDispatcher formEventDispatcher = new FormEventDispatcher();

    private bool _isBusy = false;
    public bool IsBusy {
        get { return _isBusy; }
        set
        {
            _isBusy =value;
            this.StateHasChanged();
        }
    }



    protected override async Task OnInitAsync()
    {
        using (this.TrackBusyState())
            CurrentStructure = await Http.GetJsonAsync<PageStructure>("/api/design/page/" + pageId + "/structure");

        await Preview.RefreshPagePreviewAsync(pageId,CurrentStructure);
    }



    public void CloseSideBar()
    {
        SideBarMode = SideBarMode.Collapsed;
        this.StateHasChanged();
    }

    public async Task BeginExpandSideBarAndStartEditing(StructureNode relatedPageContent)
    {
        Console.WriteLine($"[Design Page] Expanding Configurator Sidebar");
        SideBarMode = SideBarMode.Configurator;
        this.StateHasChanged();

        await ConfiguratorWidget.StartNewSession(relatedPageContent);
    }

    public async Task RefreshPagePreviewAsync()
    {
        using (this.TrackBusyState())
        {
            this.StateHasChanged();
            await Preview.RefreshPagePreviewAsync(pageId, CurrentStructure);
        }
    }


    void ToggleSideBar(UIMouseEventArgs toExpand)
    {
        SideBarMode = SideBarMode == SideBarMode.Collapsed ? SideBarMode.Toolbox : SideBarMode.Collapsed;
        this.StateHasChanged();
    }

    public async Task Save(UIMouseEventArgs eventArgs)
    {
        using (this.TrackBusyState())
        {
            await Http.PostJsonAsync<ToolboxViewModel>($"/api/design/page/{pageId}/draft",CurrentStructure);
            CloseSideBar();
        }
    }

    public async Task SaveAndPublish(UIMouseEventArgs eventArgs)
    {
        using (this.TrackBusyState())
        {
          
            await Http.PostJsonAsync<ToolboxViewModel>($"/api/design/page/{pageId}/live", CurrentStructure);
            CloseSideBar();
        }
    }

}

