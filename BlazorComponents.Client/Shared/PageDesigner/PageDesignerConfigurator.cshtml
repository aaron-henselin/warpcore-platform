@using System.Net
@using BlazorComponents.Client
@using BlazorComponents.Shared
@inject HttpClient Http

<div class="designer wc-configurator">

    <div runat="server" Id="ConfiguratorSideBarBody">
        @if (FormDescription != null)
        {
            <h3 style="min-height: 50px;">
                <small class="pull-right">
                    <button class="configurator-cancel btn" onclick=@CancelOnClick>
                        <span class="glyphicon glyphicon-info-sign">
                        </span> Cancel
                    </button>
                    <button class="btn btn-primary" onclick=@SaveOnClick>
                        Save
                    </button>
                </small>
                Settings<br/>
            </h3>

            <div runat="server" ID="surface" CssClass="wc-configurator-surface">
                @{
                    var toRender = FormDescription.Layout.ChildNodes;
                    foreach (var item in toRender)
                    {

                        <FormNode DesignNode=@item Dispatcher=@Dispatcher ConfiguratorRegistry=@_registry/>
                    }
                }
            </div>

        }
        else
        {
            <p>loading..</p>
        }
    </div>
</div>

@functions
{
    [Parameter]
    ConfiguratorFormDescription FormDescription { get; set; }

    [Parameter]
    FormEventDispatcher Dispatcher { get; set; }

    [Parameter]
    Action CancelChangesAction { get; set; }

    [Parameter]
    Action<CommittedChangesArgs> CommitChangesAction { get; set; }

    ConfiguratorRegistry _registry = new ConfiguratorRegistry();
    private Guid _contentId;

    public async Task BeginApplyNewFormLayout(Task<ConfiguratorFormDescription> formDescriptionFactory)
    {
        FormDescription = null;
        FormDescription = await formDescriptionFactory;
    }

    public void StartNewSession(FormSession session)
    {
        _contentId = session.ContentId;
        var readWriter = new CmsFormReadWriter(_registry);
        readWriter.SetValues(session.OriginalValues);

    }

    public void CancelOnClick(UIMouseEventArgs args)
    {
        CancelChangesAction();
    }

    public void SaveOnClick(UIMouseEventArgs args)
    {
        var readWriter = new CmsFormReadWriter(_registry);
        if (!readWriter.IsFormValid())
            return;

        CommitChangesAction(new CommittedChangesArgs{NewValues = readWriter.GetValues(), ContentId = _contentId});
    }




}



