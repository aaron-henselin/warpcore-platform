@using System.Net
@using BlazorComponents.Client
@using BlazorComponents.Shared
@inject HttpClient Http

<div class="designer wc-configurator">

    <div runat="server" Id="ConfiguratorSideBarBody">
        @if (FormDescription != null)
        {
            <h3 style="min-height: 50px;">
                <small class="pull-right">
                    <button class="configurator-cancel btn" onclick=@CancelOnClick>
                        <span class="glyphicon glyphicon-info-sign">
                        </span> Cancel
                    </button>
                    <button class="btn btn-primary">
                        Save
                    </button>
                </small>
                Settings<br />
            </h3>

            <div runat="server" ID="surface" CssClass="wc-configurator-surface">
                @{
                    var toRender = FormDescription.Layout.ChildNodes;
                    foreach (var item in toRender)
                    {
 
                        <FormNode DesignNode=@item Dispatcher=@Dispatcher/>
                    }
                }
            </div>
        }
    </div>
</div>

@functions
{

    private ConfiguratorFormDescription FormDescription { get; set; }

    StructureNode NodeToEdit { get; set; }

    [Parameter]
    FormEventDispatcher Dispatcher { get; set; }

    public void CancelOnClick(UIMouseEventArgs args)
    {
        Dispatcher.OnCancelEditing();
    }

    protected  override  void OnParametersSet()
    {
        Dispatcher.EditingCancelled += (sender, args) =>
        {
            FormDescription = null;
            NodeToEdit = null;
        };
        Dispatcher.EditingStarted += async (sender, args) =>
        {
            var nodeToEdit = args.StructureNode;

            if (nodeToEdit == null)
                throw new ArgumentNullException(nameof(nodeToEdit));

            if (Dispatcher == null)
                throw new ArgumentNullException(nameof(Dispatcher));

            Console.WriteLine($"[Forms] StartEditing {nodeToEdit.WidgetTypeCode}, id: {nodeToEdit.Id}");
            Console.WriteLine($"[Forms] Resetting Layout");

            NodeToEdit = nodeToEdit;
            FormDescription = null;
            this.StateHasChanged();

            Console.WriteLine($"[Forms] Retrieving new form description");
            var formApiPath = "api/design/configurator-form/" + nodeToEdit.WidgetTypeCode;
            FormDescription = await Http.GetJsonAsync<ConfiguratorFormDescription>(formApiPath);

            Console.WriteLine($"[Forms] Setting current values");
            Dispatcher.CurrentValues = NodeToEdit.Parameters;

            this.StateHasChanged();
        };

    }





}



